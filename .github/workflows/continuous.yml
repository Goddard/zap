#
##MIT License
#
#Copyright (c) 2020 Srevin Saju
#
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.
#
#-----------------------------
#This file is part of Zap AppImage Package Manager

name: Continuous
on:
  - push
  
jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix: 
        python: [3.8, 3.6, 3.7]
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python }}
        
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip wheel
          pip3 install -r requirements.txt
          pip3 install flake8
          pip3 install .
      
      - name: Run tests
        run: |
          flake8 zap
          python3 -m zap.cli
          python3 -m zap.cli install appimagetool -d
          python3 -m zap.cli update appimagetool
          yes | python3 -m zap.cli remove appimagetool
          
  centos:
    needs: [tests]
    runs-on: ubuntu-latest
    container:
      image: ubuntu:16.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up User
        run: |
          apt update
          apt install -y sudo
          echo "github ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
          useradd -m github
          usermod -aG sudo github
          su - github
          
      - name: Install python3
        run: |
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository ppa:deadsnakes/ppa
          sudo apt update
          sudo apt install -y python3.8 python3.8-dev python3.8-venv
          sudo apt install -y wget vim desktop-file-utils librsvg2-dev fuse librsvg2-2 librsvg2-bin libfuse-dev libfuse2 autotools-dev automake
          sudo apt install -y libtool libcairo-dev
          wget https://bootstrap.pypa.io/get-pip.py
          python3.8 get-pip.py
          python3.8 -m pip install setuptools --upgrade --user
          sudo apt -y install clang git wget
          git clone https://github.com/pyinstaller/pyinstaller
          cd pyinstaller
          git checkout v4.0
          cd bootloader
          python3.8 ./waf all
          cd ..
          python3.8 -m pip install -r requirements.txt
          python3.8 setup.py install --user
          cd ..
      - name: Install libappimage
        run: |
          git clone https://github.com/AppImage/libappimage --recursive
          cd libappimage && mkdir build && cd build
          wget https://github.com/Kitware/CMake/releases/download/v3.13.4/cmake-3.13.4-Linux-x86_64.sh && chmod +x cmake-3.13.4-Linux-x86_64.sh
          ./cmake-*.sh --skip-license
          ./bin/cmake .. -DBUILD_TESTING:bool=False
          make
          sudo make install
      - name: Patch ELF
        run: |
          cp /lib/x86_64-linux-gnu/libselinux.so.1 libselinux.so.1
          cp /usr/lib/x86_64-linux-gnu/libglib-2.0.so libglib-2.0.so.0
          wget -cq https://github.com/niess/patchelf.appimage/releases/download/rolling/patchelf-x86_64.AppImage
          chmod +x patchelf-x86_64.AppImage
          echo $(ldd /usr/local/lib/libappimage.so)

      - name: Install python-appimage
        run: |
          python3.8 -m pip install -r requirements.txt --user
          echo "from zap.cli import cli; cli()" > test.py
          python3.8 -m PyInstaller test.py -n zap --clean \
            --add-binary=/usr/local/lib/libappimage.so:usr/local/lib \
            --add-binary=/lib/x86_64-linux-gnu/libpcre.so.3:usr/local/lib \
            --add-binary=/usr/lib/x86_64-linux-gnu/librsvg-2.so.2:usr/local/lib \
            --add-binary=/usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0:usr/local/lib \
            --add-binary=/usr/lib/x86_64-linux-gnu/libcairo.so.2:usr/local/lib \
            --add-binary=/usr/lib/x86_64-linux-gnu/libgdk_pixbuf-2.0.so.0:usr/local/lib \
            --add-binary=/usr/lib/x86_64-linux-gnu/libgio-2.0.so.0:usr/local/lib \
            --add-binary=/usr/lib/x86_64-linux-gnu/libpangocairo-1.0.so.0:usr/local/lib \
            --add-binary=/usr/lib/x86_64-linux-gnu/libpango-1.0.so.0:usr/local/lib \
            --add-binary=/usr/lib/x86_64-linux-gnu/libcroco-0.6.so.3:usr/local/lib \
            --add-binary=/usr/lib/x86_64-linux-gnu/libxml2.so.2:usr/local/lib \
            --add-binary=/usr/lib/x86_64-linux-gnu/libffi.so.6:usr/local/lib \
            --add-binary=/usr/lib/x86_64-linux-gnu/libfreetype.so.6:usr/local/lib \
            --add-binary=/usr/lib/x86_64-linux-gnu/libpng12.so.0:usr/local/lib \
            --add-binary=/usr/lib/x86_64-linux-gnu/libxcb-shm.so.0:usr/local/lib \
            --add-binary=/usr/lib/x86_64-linux-gnu/libxcb-render.so.0:usr/local/lib \
            --add-binary=/usr/lib/x86_64-linux-gnu/libgmodule-2.0.so.0:usr/local/lib \
            --add-binary=/usr/lib/x86_64-linux-gnu/libpangoft2-1.0.so.0:usr/local/lib \
            --add-binary=/usr/lib/x86_64-linux-gnu/libthai.so.0:usr/local/lib \
            --add-binary=/usr/lib/x86_64-linux-gnu/libicuuc.so.55:usr/local/lib \
            --add-binary=/usr/lib/x86_64-linux-gnu/libharfbuzz.so.0:usr/local/lib \
            --add-binary=/usr/lib/x86_64-linux-gnu/libdatrie.so.1:usr/local/lib \
            --add-binary=/usr/lib/x86_64-linux-gnu/libicudata.so.55:usr/local/lib \
            --add-binary=/usr/lib/x86_64-linux-gnu/libfontconfig.so.1:usr/local/lib \
            --add-binary=/usr/lib/x86_64-linux-gnu/libgraphite2.so.3:usr/local/lib \
            --add-binary=libselinux.so.1:usr/local/lib \
            --add-binary=libglib-2.0.so.0:usr/local/lib
      - name: Configure Zap
        run: |
          export APPIMAGE_EXTRACT_AND_RUN=1
          export PATCHELF=$(realpath patchelf-x86_64.AppImage)
          export BUILD_ROOT=$(realpath .)
          cd dist
          mkdir squashfs-root
          cp -r zap/* squashfs-root/.
          export APPIMAGE_SQUASHFS=$(realpath squashfs-root)
          mkdir -p $APPIMAGE_SQUASHFS/usr
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x ./appimagetool-x86_64.AppImage
          cd $APPIMAGE_SQUASHFS/..
          cp $BUILD_ROOT/appimage/zap.desktop $APPIMAGE_SQUASHFS/.
          cp $BUILD_ROOT/appimage/zap.png $APPIMAGE_SQUASHFS/.
          mkdir -p $APPIMAGE_SQUASHFS/usr/share/metainfo
          cp $BUILD_ROOT/appimage/zap.appdata.xml $APPIMAGE_SQUASHFS/.
          cp $BUILD_ROOT/appimage/AppRun $APPIMAGE_SQUASHFS/.
          chmod +x $APPIMAGE_SQUASHFS/AppRun
          rm $APPIMAGE_SQUASHFS/libz.so.1
          cd $APPIMAGE_SQUASHFS/usr/local/lib
          for i in *; 
            do $PATCHELF --replace-needed libpcre.so.1 libpcre.so.3 $i
          done
          cd $APPIMAGE_SQUASHFS/..
          ./appimagetool-x86_64.AppImage --appimage-extract-and-run squashfs-root -n -u 'gh-releases-zsync|srevinsaju|zap|continuous|zap*.AppImage.zsync'
          sha256sum zap*.AppImage > zap-`git describe --tags`-GLIBC-`ldd --version | grep 'ldd ' | grep -o ').[0-9].[0-9][0-9]' | grep -o '[0-9].[0-9][0-9]'`.AppImage.SHA256SUM
          rm -rf ./appimagetool-x86_64.AppImage
          chmod +x *.AppImage
          rm -rf squashfs-root
          rm -rf libappimage
          rm -rf zap
      - name: Upload Appimage
        uses: actions/upload-artifact@v1.0.0
        with:
          name: Zap-continuous-x86_64.AppImage
          path: 'dist/'

  Release:
    needs: [centos]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v1
      with:
        name: Zap-continuous-x86_64.AppImage

    - name: Release
      uses: marvinpinto/action-automatic-releases@latest
      if: github.ref == 'refs/heads/master'
      with:
        automatic_release_tag: continuous
        title: Beta AppImage Release
        prerelease: false
        files: |
          Zap-continuous-x86_64.AppImage
        repo_token: ${{ secrets.GITHUB_TOKEN }}
